{"meta":{"title":"lejin's blog","subtitle":null,"description":null,"author":"lejinwang","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2019-09-08T07:59:50.000Z","updated":"2019-09-08T07:59:50.806Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"利用IDEA docker插件将springboot项目封装成docker服务","slug":"docker20190917","date":"2019-09-17T11:11:33.000Z","updated":"2019-09-17T07:22:00.928Z","comments":true,"path":"2019/09/17/docker20190917/","link":"","permalink":"http://yoursite.com/2019/09/17/docker20190917/","excerpt":"","text":"本文讲述如何将IDEA中的springboot项目部署到centos7系统中利用IDEA docker 插件封装成docker服务 1 系统环境1.1 Centos7 (如何在VMware中安装Centos7系统?)1.2 docker( 如何在Centos7安装docker?)1.3 jdk ( 如何在Centos7中安装JDK?)2 项目配置2.1 MakeFile Step 1：在项目（Demo）根目录创建Dockerfile文件Demo/Dockerfile Step 2：编写DockerfileDokcerfile基本格式如下： 1234567891011121314151617FROM &lt;image&gt;[:&lt;tag&gt;]//指定基础镜像，需要保证选用的基础镜像满足本//项目所依赖的环境最常见的就是java或者java+其他语言环境//&lt;image&gt;：指定作为base image的名称；// &lt;tag&gt;：base image的标签，为可选项，省略时默认为latest；COPY &lt;directory&gt;or&lt;filename&gt; &lt;directory&gt;or&lt;filename&gt;//需要将文件复制到镜像中使用//&lt;directory&gt;or&lt;filename&gt;：前一个是本地目录下的所有文件（包括该目录下的文件夹）或单个文件名//（可相对Makefile文件位置使用相对路径也可使用绝对路径）//后一个则是镜像中位置或复制文件后的文件名，如果是复制文件可重新指定文件名。ADD &lt;directory&gt;or&lt;filename&gt; &lt;directory&gt;or&lt;filename&gt;//与COPY类似，ADD支持使用TAR文件和URL路径，并且会将tar文件展开，如果指定的是url，//会从指定的url下载文件放到目录中（ 如果url下载的文件为tar文件，则不会展开）ADD name-version.jar app.jar//name和version要与pom.xml对应ENTRYPOINT &lt;指令&gt;//容器启动执行的命令 实例 12345FROM openjdk:8-jdk-alpineVOLUME /tmpADD /target/demo-0.0.1-SNAPSHOT.jar app.jarENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]// demo-0.0.1-SNAPSHOT.jar 是你的项目IDEA mave打包后jar文件，具体名称可在pom.xml中查看，默认是 项目名称-0.0.1.SNAPSHOT.jar pom.xml文件这块信息 1234567&lt;groupId&gt;com.example&lt;/groupId&gt;&lt;!--项目名称 --&gt;&lt;artifactId&gt;demo&lt;/artifactId&gt;&lt;!-- 版本 --&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;name&gt;demo&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt; 2.2 docker 开启远程访问 Step 1：编辑docker配置文件 1sudo vi /lib/systemd/system/docker.service 修改以ExecStart为开头的 ，修改为： 1ExecStart=/usr/bin/dockerd -H unix://var/run/docker.sock -H tcp://0.0.0.0:2375 注：2375是你为docker配置的访问的端口，可以是其它值 Step 2：更新修改 1systemctl daemon-reload Step 3：重启docker服务 1sudo service docker restart 注：这里可以试着直接在Centos7系统下测试，输入命令： curl http://localhost:2375/version 成功输出版本信息，则表明配置成功，之后在浏览器测试，不过一般都会提示无法访问，需要下面的开启2375端口的步骤，碰到端口无法访问（长时间无反应）可能就是防火墙端口未开启。 Step 4：开启Centos7 防火墙2375端口 12firewall-cmd --zone=public --add-port=2375/tcp --permanent# 正常执行后会输出success Step 5：重启防火墙 1firewall-cmd --reload Step 6：测试 在主机浏览器输入http://IP:2375/version，可以看到输出了版本信息，至此docker开启远程访问成功。 2.3 IDEA 配置 Step 1：下载docker插件 IDEA --&gt; File --&gt;Settings --&gt; Plugins --&gt; 搜索docker --&gt; 安装Docker integraiton Step 2：docker插件配置 IDEA --&gt; File --&gt;Settings --&gt; Build,Execution,Deployment--&gt; Docker --&gt; 增加一个docker远程链接修改Tcp socket 为tcp://你的IP:2375会提示链接成功，点击OK。IDEA 下方会有docker图标出现，点击启动,可以远程可视化操作docker images 注：tcp://你的IP:2375只是对于Linux系统下的docker，windows系统格式不一样 Step 3：打包配置 IDEA --&gt; Run --&gt; Edit Configuartion增加一个docker服务，以dockerfile的形式。Name：命名Server：选择你的目标dockerDockerfile：你的Dockerfile文件Image tag：镜像标签（不设置默认latest）Container name：容器名（不设置系统会随便取个名Bind ports：绑定端口（主机端口：容器端口（默认8080））Command preview：可以预览你配置后将要执行的命令。由于dockerfile里面配置的是项目jar文件封装，所以我们差一个项目打包后的jar文件，当然你可以手动打包，但没必要，因为在这个配置页面最后一栏有个Before launch配置项，我们可以将maven打包命令写在这里。如：clean package。添加maven命令成功后会显示：Run Maven Goal ‘项目名:clean package’。点击OK,配置完成。注：clean package命令会将打包后的jar放在/target/目录下，所以Dockerfile里面是ADD /target/项目名-0.0.1-SNAPSHOT.jar app.jar。点击RUN Step 4：运行 在idea右上方会有刚才配置的执行脚本，点击执行。不出意外，接下来就是等待服务封装成功了。 Step 5：验证 查看镜像是否创建成功，docker images也可直接看IDEA docker插件可视化管理栏。访问服务进行验证，容器log栏可以看输出信息。 至此将springboot服务 封装成docker服务就成了。这篇文章内容，包含了如何打包springboot成jar以及如何将springboot服务封装成jar，较之前我写的两篇博客更加简单。但是使用插件虽然简单，但是容易出错，特别是比较复杂的项目，本人的建议是，简单的docker服务：只涉及跨平台语言环境（比如java）、依赖较少的项目可以使用本博客的方法。较为复杂的项目，如果使用插件出错了，可使用另外我写的方法。 参考链接 https://blog.csdn.net/w57685321/article/details/79339740","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"},{"name":"Docker","slug":"后端/Docker","permalink":"http://yoursite.com/categories/后端/Docker/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"},{"name":"IDEA","slug":"IDEA","permalink":"http://yoursite.com/tags/IDEA/"}]},{"title":"利用maven将springboot项目封装成docker服务","slug":"docker20190916","date":"2019-09-16T11:11:33.000Z","updated":"2019-09-17T02:01:49.873Z","comments":true,"path":"2019/09/16/docker20190916/","link":"","permalink":"http://yoursite.com/2019/09/16/docker20190916/","excerpt":"","text":"本文讲述如何将idea中的springboot项目部署到centos7系统中利用maven封装成docker服务 1 系统环境1.1 Centos7 (如何在VMware中安装Centos7系统?)1.2 docker( 如何在Centos7安装docker?)1.3 jdk ( 如何在Centos7中安装JDK?)1.4 maven Step 1： 安装yum配置工具 1yum install -y Step2：使用配置工具配置第三方epel源仓库 123yum-config-manager --add-repo http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repoyum-config-manager --enable epel-apache-maven Step3： 安装maven 1yum install -y apache-maven 2 项目配置2.1 MakeFile Step 1：在项目main/docker/目录创建Dockerfile文件src/main/docker/Dockerfile Step 2：编写DockerfileDokcerfile基本格式如下： 1234567891011121314151617FROM &lt;image&gt;[:&lt;tag&gt;]//指定基础镜像，需要保证选用的基础镜像满足本//项目所依赖的环境最常见的就是java或者java+其他语言环境//&lt;image&gt;：指定作为base image的名称；// &lt;tag&gt;：base image的标签，为可选项，省略时默认为latest；COPY &lt;directory&gt;or&lt;filename&gt; &lt;directory&gt;or&lt;filename&gt;//需要将文件复制到镜像中使用//&lt;directory&gt;or&lt;filename&gt;：前一个是本地目录下的所有文件（包括该目录下的文件夹）或单个文件名//（可相对Makefile文件位置使用相对路径也可使用绝对路径）//后一个则是镜像中位置或复制文件后的文件名，如果是复制文件可重新指定文件名。ADD &lt;directory&gt;or&lt;filename&gt; &lt;directory&gt;or&lt;filename&gt;//与COPY类似，ADD支持使用TAR文件和URL路径，并且会将tar文件展开，如果指定的是url，//会从指定的url下载文件放到目录中（ 如果url下载的文件为tar文件，则不会展开）ADD name-version.jar app.jar//name和version要与pom.xml对应ENTRYPOINT &lt;指令&gt;//容器启动执行的命令 实例 12345FROM wanglejin/centosjavagcc:v1.0VOLUME /tmpADD casa-1.1b casa-1.1bADD real_casa-1.0.jar app.jarENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"] 2.2 pom.xml step 1：增加docker maven依赖 123456789101112131415161718&lt;!-- Docker maven plugin --&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;project.artifactId&#125;&lt;/imageName&gt; &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- Docker maven plugin --&gt; step 2：指定生成jar文件名和版本 12345678910 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--新增--&gt; &lt;groupId&gt;com.neo&lt;/groupId&gt; &lt;artifactId&gt;real_casa&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;!--新增--&gt; 完整pom.xml实例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;!--新增--&gt; &lt;groupId&gt;com.neo&lt;/groupId&gt; &lt;artifactId&gt;real_casa&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt;&lt;!--新增--&gt; &lt;name&gt;spring-boot-docker&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.0.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;docker.image.prefix&gt;springboot&lt;/docker.image.prefix&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!-- https://mvnrepository.com/artifact/net.sourceforge.jeval/jeval --&gt; &lt;dependency&gt; &lt;groupId&gt;net.sourceforge.jeval&lt;/groupId&gt; &lt;artifactId&gt;jeval&lt;/artifactId&gt; &lt;version&gt;0.9.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.udojava&lt;/groupId&gt; &lt;artifactId&gt;EvalEx&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.json&lt;/groupId&gt; &lt;artifactId&gt;json&lt;/artifactId&gt; &lt;version&gt;20180813&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!-- Docker maven plugin --&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;project.artifactId&#125;&lt;/imageName&gt; &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- Docker maven plugin --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.4.2&lt;/version&gt; &lt;configuration&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 实例源码下载：real_casa（涉及java+C语言环境，casa-1.1b为C语言程序可执行文件，编写自己的项目时可删除无关文件） 2.3 打包封装 Step 1：部署 将配置好的项目复制到Centos7中，可以使用文件传输工具也可以利用版本控制工具git。 Step 2：打包 进入项目根目录，执行命令mvn package -Dmaven.test.skip=true docker:build Step 3：查看 docker images查看新生成的镜像 Step 4：运行 docker run -it -p 主机端口:8080（默认） 镜像名 /bin/bash（bin/sh） docker ps展示所有在运行的容器 Step 5：验证 访问https//IP:8080 Step 6：上传镜像 docker login docker tag 镜像id wanglejin/real_casa:v1.0 docker push 参考链接 https://www.cnblogs.com/zscc/articles/9428466.html","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"},{"name":"Docker","slug":"后端/Docker","permalink":"http://yoursite.com/categories/后端/Docker/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"在Centos7搭建springboot+docker+mysql+redis+conductor+tomcat环境","slug":"categories1","date":"2019-09-08T08:02:49.000Z","updated":"2019-09-16T11:07:04.467Z","comments":true,"path":"2019/09/08/categories1/","link":"","permalink":"http://yoursite.com/2019/09/08/categories1/","excerpt":"","text":"本文讲述本人在阿里云服务器（操作系统为Centos7）搭建CitHub系统环境的记录，旨在日后的温习以及后人参阅。 1 Centos7系统 Windows系统 下可利用虚拟机，例 如VMware，本人在windows环境下测试CitHub系统时就是利用的VMware，至于具体的“如何在VMware安装Centos7系统VMware？”请关注后续更新，这里就不展开了。 阿里云服务器 租用时可直接选择所安装 的系统，所以无需考虑Centos7系统的问题。 注：下文环境搭建均是在阿里云服务器进行 2 docker配置 Step 1: 安装必要的一些系统工具 1sudo yum install -y yum-utils device- mapper-persistent-data lvm2 Step 2: 添加软件源信息 1sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo Step 3: 更新并安装Docker-CE 12sudo yum makecache fastsudo yum -y install docker-ce Step 4: 开启Docker服务 1sudo service docker star 3 mysql配置 Step 1:依次输入如下命令 12345yum install mysqlyum install mysql-develwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmrpm -ivh mysql-community-release-el7-5.noarch.rpmyum install mysql-community-server Step 2:重启mysql服务 1service mysqld restart Step 3:设置编码进入配置文件Vi /etc/my.cnf在末尾添加 12[mysql]Default-character-set =utf8 Step 4:登录mysql（初次安装mysql时，root账户没有密码） 1mysql -u root 进入mysql操作窗口 Step 5:设置用户名密码 1mysql&gt; set password for root@localhost = password('123456'); Step 6:设置远程连接某个database 1mysql&gt; grant all privileges on ctest.* to gist@'%' identified by 'password'; &ensp;&ensp;&ensp;其中ctest是database名，ctest.* 表示可以访问databas名为ctest的所有table，gist表示用于远程连接的用户名。 4 redis配置 可以参考这篇博客CENTOS7下安装REDIS，讲的很详细。下面主要是设置redis开机自启动 Step 1:进入配置文件 1vim /etc/systemd/system/redis-server.service Step 2:添加内容 12345678910111213[Unit]Description=The redis-server Process ManagerAfter=syslog.target network.target[Service]Type=simplePIDFile=/var/run/redis_6379.pidExecStart=/usr/local/redis/redis-server /usr/local/redis/redis.conf ExecReload=/bin/kill -USR2 $MAINPIDExecStop=/bin/kill -SIGINT $MAINPID[Install]WantedBy=multi-user.target Step 3:设置开机自启动 123systemctl daemon-reloadsystemctl start redis-server.servicesystemctl enable redis-server.service Step 4:检查是否安装成功 1ps -A|grep redis 5 jdk配置 Step 1:下载安装包最好是访问官网，注册登录之后可免费下载各个版本的安装包，注意选择Linux系统的安装包（本人选择的是jdk-8u11-linux-x64.tar.gz) Step 2:卸载centos原本自带的openjdk 1rpm -qa | grep java 然后通过rpm -e --nodeps code 后面跟系统自带的jdk名 这个命令来删除系统自带的jdk，例如rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64 Step 3:在/home目录下新建java目录 1mkdir java Step 4:将jdk安装包传到这个目录下这里推荐一个传输工具ssh secure shell client，通过ssh传输东西十分方便。 Step 5:解压压缩包（在该文件目录下） 1tar -zxvf jdk-8u11-linux-x64.tar.gz Step 6:配置环境vi /etc/profile，在最后添加 123export JAVA_HOME=/home/java/jdk1.8.0_11export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin Step 7:生效配置 运行：. /etc/profile 点和/之间有个空格，然后java -version 查看是否成功输出版本信息。 6 tomcat配置 Step 1:下载tomcat安装包去tomcat官网下载，选择Core类别下tar.gz包，本人选用的是apache-tomcat-9.0.24.tar.gz。 Step 2:将安装包上传到服务器依然是通过ssh secure shell client工具。 Step 3:在tomcat目录下解压 1tar -zxvf apache-tomcat-9.0.24.tar.gz Step 4:启动tomcat/bin目录下，执行命令 ./startup.sh Add 1:关闭tomcat/bin 目录下执行命令./shutdown由于本人在关闭tomcat时发现有时候会出现tomcat无法完全关闭的情况，也就是关闭tomcat之后，再启动时出现端口被占用情况，为此我想到的解决办法是，通过查询tomcat端口所在进程号，通过进程号终止tomcat运行。例如我的tomcat占用的是默认端口号：8080，那么可以先通过lsof -i:8080得到PID（进程号），然后通过kill -9 PID结束进程。 Add 2:更改tomcat端口号只需修改conf目录下server.xml文件，将8080更改为你想设置的端口号，本人考虑到后续conductor服务所占端口正是8080，遂改为8686。注：所设置的端口号，必须是阿里云所开放的端口号，阿里云开发的端口号可以通过控制台网络配置-&gt;配置规则进行设置 7 conductor配置 Step 1:获取conductor运行包 有三种方式具体可以看conductor官网介绍。本人采用第二种方式也就是直接在mvn repository下载得到。 Step 2: 运行conductor直接在该文件目录下执行 java -jar conductor.jar便可。 Add 1:后台运行jar文件 1nohup java -jar jarname.jar &gt;log2.file 2&gt;&amp;1 &amp; 到此系统运行所需环境已经全部搭建好了","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"部署","slug":"部署","permalink":"http://yoursite.com/tags/部署/"},{"name":"Centos7","slug":"Centos7","permalink":"http://yoursite.com/tags/Centos7/"},{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"将springboot项目打包成jar","slug":"categories2","date":"2019-09-08T00:47:37.709Z","updated":"2019-09-16T11:11:57.760Z","comments":true,"path":"2019/09/08/categories2/","link":"","permalink":"http://yoursite.com/2019/09/08/categories2/","excerpt":"","text":"编写好一个springboot项目往往需要将它打包成jar文件部署到服务器上去，那么如何打包呢？ 注：下文打包过程均在本人coding工具——idea中进行。 按步骤 Step 1:选择打包方式 idea –&gt; File –&gt; Project Structure –&gt; Artifacts –&gt; add JAR –&gt; From modules with dependencies... Step 2:选择项目和入口类Module:项目名MainClass:主类名JAR files from lib:copy to the output directory…Directory:默认是java目录下，修改默认值为src目录下或src/main/resources目录下。 Step 3:选择打包类型和输出目录Type:OtherOutput directory:(可自定义打包后jar文件输出目录)点击OK Step 4:打包成jaridea –&gt; Build –&gt; Build Artifacts –&gt; 选择刚才设置的jar文件名 –&gt; Build Step 5:测试生成的jar来到你设置的jar输出目录 –&gt; 打开命令行 –&gt; java -jar 项目名.jar可以看到项目成功执行，idea tomcat 默认端口是8080，注意8080端口别被占用了不然会执行失败。 参考链接 https://www.cnblogs.com/zscc/articles/9428466.html","categories":[{"name":"后台","slug":"后台","permalink":"http://yoursite.com/categories/后台/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"idea","slug":"idea","permalink":"http://yoursite.com/tags/idea/"},{"name":"package","slug":"package","permalink":"http://yoursite.com/tags/package/"}]},{"title":"写一篇属于自己的博客","slug":"hello-world","date":"2019-09-07T13:48:59.184Z","updated":"2019-09-09T02:04:28.982Z","comments":true,"path":"2019/09/07/hello-world/","link":"","permalink":"http://yoursite.com/2019/09/07/hello-world/","excerpt":"","text":"记录一些可能会用到的Markdown语法 Markdown 基本要素标题这是一级标题这是二级标题这是 三级标题强调这会是 斜体 的文字这会是 斜体 的文字 这会是 粗体 的文字这会是 粗体 的文字 你也 组合 这些符号 这个文字将会被横线删除 无序列表 Item 1 Item 2a Item 1I Item 2 列表文本前使用 [减号+空格] 列表文本前使用 [加号+空格] 列表文本前使用 [星号+空格]有序列表 Item 1 Item 2 Item 3 Item 3a Item 3b 列表前使用 [数字+空格] 我们会自动帮你添加数字 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3列表嵌套 列出所有元素： 无序列表元素 A 元素 A 的有序子列表 前面加四个空格 列表里的多段换行：前面必须加四个空格，这样换行，整体的格式不会乱 列表里引用： 前面空一行仍然需要在 &gt; 前面加四个空格 列表里代码段： 1前面四个空格，之后按代码语法 ``` 书写 或者直接空八个，引入代码块 引用正如 Kanye West 所说： We’re living the future sothe present is our past. 引用文本前使用 [大于号+空格]折行可以不加，新起一行都要加上哦 这是引用里嵌套的一个列表 还可以有子列表 子列表需要从 - 之后延后四个空格开始 同样的，在前面加四个空格形成代码块 12&gt; 或者使用 ``` 形成代码块&gt; 换行在当前行的结尾加 2 个空格这行就会新起一行 下划线如下，三个或者更多的 连字符 星号 下划线 任务列表 @mentions, #refs, links, formatting, and tags supported list syntax required (any unordered or ordered list supported) this is a complete item this is an incomplete item表格First | Second | 2 |———— | ————-| ————-cell 1 | cell 2 | 1 |cell 1 | cell 2 | 2 |代码高亮显示行数,标注第几行123require &apos;redcarpet&apos;markdown = Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html 上下标30^th^H~2~O 脚注Content [^1][^1]: Hi! This is a footnote 缩略[HTML]: Hyper Text Markup Language [W3C]: World Wide Web ConsortiumThe HTML specificationis maintained by the W3C. 标记==marked== 图片和连接 这个链接用 1 作为网址变量 [Google][1].然后在文档的结尾位变量赋值（网址） [1]: ../tags/favicon.ico GitHub这个链接用 1 作为网址变量 [Google][1].这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [yahoo]: http://www.yahoo.com/ 高级技巧HTML行内 HTML 元素1目前只支持部分段内 HTML 元素效果，包括 &lt;kdb&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt;&lt;sub&gt; &lt;br&gt; 键位显示使用 Ctrl+Alt+Del 重启电脑","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"first","slug":"first","permalink":"http://yoursite.com/tags/first/"}]}]}